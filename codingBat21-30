//Emi Rohn, Coding Bat 21-30. 5/8/20

public class codingBat21-30{
  
  //#21
  public int countEvens(int[] nums) {
  int count = 0;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] % 2 == 0){
                count++;
            }
        }
        return count;
}
  
  //#22
  public int countHi(String str) {
  int count = 0;
   for (int i=0; i < str.length()-1; i++){
    if(str.substring(i, i+2).equals("hi")){
      count++;
    }
  }
  return count;
  }

  
  //#23
  public boolean no14(int[] nums) {
  boolean has1 = false;
  boolean has4 = false;
  for(int i = 0; i < nums.length; i++){
    if(nums[i] == 1){
      has1 = true;
    }if(nums[i] == 4){
      has4 = true;
    }
  }
  return !has1 || !has4;
  }

  
  //#24
  public boolean either24(int[] nums) {
  boolean has2 = false;
  boolean has4 = false;
  for(int i = 0; i < nums.length - 1; i++){
    if(nums[i] == 2 && nums[i+1] == 2){
      has2 = true;
    }if(nums[i] == 4 && nums[i+1] == 4){
      has4 = true;
    }
  }
  if(has2 && has4){
    return false;
  }else if(has2 || has4){
    return true;
  }else{
    return false;
  }
  }
  
  //#25
  public int makeChocolate(int small, int big, int goal) {
  int j=0;
  int i=0;
  if(goal > (big * 5) + small){ 
    return -1;
  }  
  for(int x = 0; x < big; x++){
     if(j <= goal){
       j = j + 5;
     }
  }if(j==goal){ 
    return 0;
  }
  if(j>goal){
    j=j-5;
  }
  if(goal-j>small){
    return -1;
  }
  return (goal-j);
  }
  
  //#26
  public int luckySum(int a, int b, int c) {
  if(a == 13){
    a = 0;
    b = 0;
    c = 0;
  }else if(b == 13){
    b = 0;
    c = 0;
  }else if(c == 13){
    c = 0;
  }
  int sum = a + b + c;
  return sum;
  }
  
  //#27
  public int maxBlock(String str) {
  int maxSize = 0;
  int tempMax = 0;
   
  if(str.length() > 0)
    maxSize = 1;
   
  for(int i = 0; i < str.length(); i++){
    if(str.length() > 0){
      tempMax = 1;
    }
    while(i+1 < str.length() && str.charAt(i) == str.charAt(i+1)){
      tempMax = tempMax + 1;
      i = i + 1;
      if(tempMax > maxSize)
        maxSize = tempMax;
    }
  }
  return maxSize;
  }
  
  //#28
  public boolean linearIn(int[] outer, int[] inner) {
  int correct = 0;
  for(int i = 0; i < inner.length; i++){
    for(int j = 0; j < outer.length; j++){
      if(inner[i] == outer[j]){
        correct++;
      }
    }
  }
  if(correct >= inner.length){
    return true;
  }else{
    return false;
  }
  }

  
  
  //#29
  public int countTriple(String str) {
  int count = 0;
  for(int i = 0; i < str.length()-2; i++){
    if(str.charAt(i) == str.charAt(i+1) && str.charAt(i) == str.charAt(i+2)) {
      count++;
    }
  }
  return count;
  }

  //#30
  public String sameEnds(String string) {
    String end = "";
    for (int i = 0; i <= string.length() / 2; i++){
        for (int j = string.length() / 2; j < string.length(); j++){
            if (string.substring(0, i).equals(string.substring(j))){
                end = string.substring(0, i);
            }
        }
    }
    return end;
  }

}
